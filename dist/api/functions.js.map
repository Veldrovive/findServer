{"version":3,"sources":["../../src/api/functions.js"],"names":["allParse","json","JSON","parse","getDeviceList","family","Promise","err","resp","body","success","resolve","devices","getDevice","name","reject","undefined","analysis","guesses","locations","familyIterator","interTime","interList","deviceList","getDevices","then","getProb","startInter","push","setInterval","forEach","clearInterval","inter","map","o","index","data","device","probs","devName","devicesProbs","deviceIndex","currentDevice","locIndex","loc","prob","location","probability"],"mappings":"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","file":"functions.js","sourcesContent":["import request from 'request';\nimport findIndex from 'lodash.findindex';\n\nexport function allParse (json) {\n  if(json !== null && typeof json === 'object'){\n    return json;\n  }else if(typeof json === 'string'){\n    return JSON.parse(json);\n  }else{\n    return json;\n  }\n};\n\n//Queries find3 api to get all devices for a family\nexport const getDeviceList = (family) => {\n  return new Promise(resolve => {\n    request(\"https://cloud.internalpositioning.com/api/v1/devices/\"+family, function(err, resp, body){\n      body = allParse(body);\n      if(body.success === false){\n        resolve(false);\n      }else{\n        resolve({devices: body.devices})\n      }\n    })\n  })\n};\n\n//Queries find3 api to get prob data for a device\nexport const getDevice = (family, name) => {\n  return new Promise((resolve, reject) => {\n    if(name !== undefined){\n      request(\"https://cloud.internalpositioning.com/api/v1/location/\"+family+\"/\"+name, function(err, resp, body){\n        body = allParse(body);\n        if(body.success === false){\n          reject(false);\n        }else{\n          resolve(body.analysis.guesses);\n        }\n      })\n    }else{\n      request(\"https://cloud.internalpositioning.com/api/v1/locations/\"+family, function(err, resp, body){\n        body = allParse(body);\n        if(body.success === false){\n          reject(false);\n        }else{\n          resolve(body.locations);\n        }\n      })\n    }\n  })\n}\n\nexport default class familyIterator {\n  constructor(family, interTime){\n    this.family = family || \"aidantest2\";\n    this.interTime = interTime || 60000;\n    this.interTime = this.interTime < 9999 ? 10000 : this.interTime;\n\n    this.interList = [];\n\n    //Format: {name: \"pi\", probs: [{loc: \"lc1\", prob: 82}, loc: \"lc2\", prob: 2]}\n    this.deviceList = [];\n    this.getDevices()\n      .then(() => {\n        this.getProb()\n          .then(() => this.startInter());\n      })\n    return;\n  }\n\n  startInter(){\n    this.interList.push(setInterval(() => {\n      this.getProb();\n    }, this.interTime));\n  }\n\n  stopInter(){\n    this.interList.forEach(inter => {\n      clearInterval(inter);\n    })\n  }\n\n  returnDevices(){\n    return this.deviceList.map(o => o.name);\n  }\n\n  returnDevice(name){\n    return new Promise((resolve, reject) => {\n      const index = findIndex(this.deviceList, o => o.name === name);\n      if(index === -1) return resolve({data: undefined, err: \"Device does not exist\", success: false});\n      return resolve({data: this.deviceList[index], err: '', success: true});\n    })\n  }\n\n  getDevices(){\n    return new Promise(async (resolve, reject) => {\n      let deviceList = await getDeviceList(this.family);\n      if(deviceList === false) return reject(false);\n      deviceList = deviceList.devices;\n      deviceList.forEach(device => {\n        if(findIndex(this.deviceList, o => {return o.name === device}) === -1){\n          this.deviceList.push({name: device, probs: []});\n        }\n      })\n      return resolve(this.deviceList);\n    })\n  }\n\n  getProb(devName){\n    return new Promise(async (resolve, reject) => {\n      if (devName === undefined) {\n        const devicesProbs = await getDevice(this.family);\n        devicesProbs.forEach(async device => {\n          const name = device.device;\n          const probs = device.analysis.guesses;\n          let deviceIndex = findIndex(this.deviceList, o => {return o.name === name});\n          if(findIndex === -1){\n            await this.getDevices();\n            deviceIndex = findIndex(this.deviceList, o => {return o.name === name});\n          }\n          const currentDevice = this.deviceList[deviceIndex];\n          probs.forEach(prob => {\n            const locIndex = findIndex(currentDevice.probs, o => {return o.loc === prob.location});\n            if (locIndex != -1) {\n              currentDevice.probs[locIndex].prob = prob.probability || 0;\n            } else {\n              currentDevice.probs.push({loc: prob.location, prob: prob.probability || 0});\n            }\n          })\n          return resolve({success: true, err: ''})\n        })\n      } else {\n        const deviceIndex = findIndex(this.deviceList, o => {return o.name === devName});\n        if(deviceIndex == -1) return reject({success: false, err: 'Device does not exist'});\n        const device = this.deviceList[deviceIndex];\n        const probs = await getDevice(this.family, devName);\n        probs.forEach(prob => {\n          const locIndex = findIndex(device.probs, o => {return o.loc === prob.location})\n          if (locIndex != -1) {\n            device.probs[locIndex].prob = prob.probability || 0;\n          } else {\n            device.probs.push({loc: prob.location, prob: prob.probability || 0});\n          }\n        })\n        return resolve({success: true, err: ''})\n      }\n    })\n  }\n}\n"]}